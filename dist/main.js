#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var async = require("async");
var _ = require("lodash");
var threadSleep = require('thread-sleep');
var discourse = require('discourse-sdk');
var targetUrl;
program
    .version("v" + require('../package.json').version)
    .description('A tool to auto generate data in discourse')
    .option('--username [value]', 'Api user name')
    .option('--apikey [value]', 'Api key')
    .option('--title [value]', 'title of a topic.', 'Topic from data generator')
    .option('--content [value]', 'content of a topic.', 'This message is autogenerated.')
    .option('--count [value]', 'how many time it runs.', 1)
    .option('--parellel [value]', 'the maxnium corrent thread to create data', 10)
    .arguments('<targetSite>')
    .action(function (targetSite) {
    targetUrl = targetSite;
})
    .parse(process.argv);
if (!targetUrl || !program.username || !program.apikey) {
    console.log('Error: must specify target_site, api_username and api_key');
    program.help();
}
var count = 1;
if (program.count) {
    try {
        count = parseInt(program.count, 10);
    }
    catch (e) { }
}
var parellel = 10;
if (program.parellel) {
    try {
        parellel = parseInt(program.parellel, 10);
    }
    catch (e) { }
}
var data = {
    api_key: program.apikey,
    api_username: program.username,
    title: program.title,
    raw: program.content
};
if (!(targetUrl.indexOf('http') === 0)) {
    targetUrl = "http://" + targetUrl;
}
var client = new discourse(targetUrl, program.apikey, program.username);
var title = program.title;
var array = _.range(count);
console.log("size " + count + " array ready.");
async.eachLimit(array, parellel, function (index, callback) {
    data.title = title + " " + index;
    client.createTopic(data.title, data.raw, 0, function (err, body, statusCode) {
        if (statusCode === 200) {
            console.log(index + " uploaded.");
        }
        else {
            try {
                var error = JSON.parse(body);
                console.error(index + " failed: " + error.errors[0]);
            }
            catch (_a) {
                console.error(index + " failed: " + body);
            }
        }
        callback();
    });
}, function (err) {
    console.error(err);
});
console.log('Exit success.');
function sleep() {
    var sleepSeconds = 60;
    console.log("Sleep for " + sleepSeconds + " seconds.");
    threadSleep(sleepSeconds * 1000);
}
