#!/usr/bin/env node
import * as request from 'request';
import * as program from 'commander';

let targetUrl: string;
program
.version(`v${require('../package.json').version}`)
.description('A tool to auto generate data in discourse')
.option('--username [value]', 'Api user name')
.option('--apikey [value]', 'Api key')
.option('--title [value]', 'title of a topic.', 'Topic from data generator')
.option('--content [value]', 'content of a topic.', 'This message is autogenerated.')
.option('--count [value]', 'how many time it runs.')
.arguments('<targetSite>')
.action(function (targetSite: string) {
    targetUrl = targetSite;
 })
.parse(process.argv);

if (!targetUrl || !program.username || !program.apikey) {
    console.log('Error: must specify target_site, api_username and api_key');
    program.help();
}

let count = 1;
if (program.count) {
    try {
        count = parseInt(program.count, 10);
    } catch (e) {}
}

let data = {
    api_key: program.apikey,
    api_username: program.username,
    title: program.title,
    raw: program.content
};

let title: string = program.title;

fireRequest(data, title, count);

function fireRequest(data: any, title: string, count: number): void {
    if (count > 1) {
        data.title = `${title} ${count}`;
    } else {
        data.title = title;
    }

    request.post({
        url: `http://${targetUrl}/posts`,
        formData: data
    }, (err, httpResponse, body) => {
        if (err) {
            console.error(count + ': Upload failed:', err);
        }
        body = JSON.parse(body);
        if (!body.errors) {
            console.log(count + ': Upload successful!  Server responded with:', body);
        } else {
            console.error(count + ': Upload failed:', body.errors);
        }

        if (count > 1) {
            fireRequest(data, title, count - 1);
        }
    });
}
