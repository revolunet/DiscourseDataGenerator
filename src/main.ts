#!/usr/bin/env node
import * as request from 'request';
import * as program from 'commander';
import * as async from 'async';
import * as _ from 'lodash';
import { ErrorCallback } from 'async';
let threadSleep = require('thread-sleep');
let discourse = require('discourse-sdk');

let targetUrl: string;
program
.version(`v${require('../package.json').version}`)
.description('A tool to auto generate data in discourse')
.option('--username [value]', 'Api user name')
.option('--apikey [value]', 'Api key')
.option('--title [value]', 'title of a topic.', 'Topic from data generator')
.option('--content [value]', 'content of a topic.', 'This message is autogenerated.')
.option('--count [value]', 'how many time it runs.', 1)
.option('--parellel [value]', 'the maxnium corrent thread to create data', 10)
.arguments('<targetSite>')
.action(function (targetSite: string) {
    targetUrl = targetSite;
 })
.parse(process.argv);

if (!targetUrl || !program.username || !program.apikey) {
    console.log('Error: must specify target_site, api_username and api_key');
    program.help();
}

let count = 1;
if (program.count) {
    try {
        count = parseInt(program.count, 10);
    } catch (e) {}
}

let parellel = 10;
if (program.parellel) {
    try {
        parellel = parseInt(program.parellel, 10);
    } catch (e) {}
}

let data = {
    api_key: program.apikey,
    api_username: program.username,
    title: program.title,
    raw: program.content
};

if (!(targetUrl.indexOf('http') === 0)) {
    targetUrl = `http://${targetUrl}`;
}

let client = new discourse(targetUrl, program.apikey, program.username);

let title: string = program.title;

let array = _.range(count);
console.log(`size ${count} array ready.`);
async.eachLimit(array, parellel, (index, callback) => {
    data.title = `${title} ${index}`;
    client.createTopic(data.title, data.raw, 0, (err: string, body: string, statusCode: number) => {
        if (statusCode === 200) {
            console.log(`${index} uploaded.`);
        } else {
            try {
                let error = JSON.parse(body);
                console.error(`${index} failed: ${error.errors[0]}`);
            } catch {
                console.error(`${index} failed: ${body}`);
            }
        }
        callback();
    });
}, (err) => {
    console.error(err);
});
console.log('Exit success.');

function sleep(): void {
    let sleepSeconds = 60;
    console.log(`Sleep for ${sleepSeconds} seconds.`);
    threadSleep(sleepSeconds * 1000);
}
